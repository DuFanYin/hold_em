{"ast":null,"code":"var _jsxFileName = \"/Users/hang/Everything/computing/hold_em/app/frontend/src/components/PlayerList.jsx\";\n// src/components/PlayerList.jsx\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlayerList({\n  players,\n  gameState,\n  onPlayerAction\n}) {\n  const handleAction = player => {\n    // This could be more complex, depending on your game's action logic\n    const action = `${player} took their turn`;\n    onPlayerAction(action); // Send action to backend via socket\n  };\n  if (!gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading game state...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Game Status: \", gameState.gameStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Current Turn: \", gameState.currentTurn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [player, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAction(player),\n          children: \"Take Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 22\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Actions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: gameState.actions.map((action, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: action\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_c = PlayerList;\nexport default PlayerList;\nvar _c;\n$RefreshReg$(_c, \"PlayerList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PlayerList","players","gameState","onPlayerAction","handleAction","player","action","children","fileName","_jsxFileName","lineNumber","columnNumber","gameStatus","currentTurn","map","index","onClick","actions","_c","$RefreshReg$"],"sources":["/Users/hang/Everything/computing/hold_em/app/frontend/src/components/PlayerList.jsx"],"sourcesContent":["// src/components/PlayerList.jsx\nimport React from 'react';\n\nfunction PlayerList({ players, gameState, onPlayerAction }) {\n  const handleAction = (player) => {\n    // This could be more complex, depending on your game's action logic\n    const action = `${player} took their turn`;\n    onPlayerAction(action); // Send action to backend via socket\n  };\n\n  if (!gameState) {\n    return <div>Loading game state...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Game Status: {gameState.gameStatus}</h1>\n      <h2>Current Turn: {gameState.currentTurn}</h2>\n      <ul>\n        {players.map((player, index) => (\n          <li key={index}>\n            {player} <button onClick={() => handleAction(player)}>Take Action</button>\n          </li>\n        ))}\n      </ul>\n      <h3>Actions:</h3>\n      <ul>\n        {gameState.actions.map((action, index) => (\n          <li key={index}>{action}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default PlayerList;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAe,CAAC,EAAE;EAC1D,MAAMC,YAAY,GAAIC,MAAM,IAAK;IAC/B;IACA,MAAMC,MAAM,GAAG,GAAGD,MAAM,kBAAkB;IAC1CF,cAAc,CAACG,MAAM,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,IAAI,CAACJ,SAAS,EAAE;IACd,oBAAOH,OAAA;MAAAQ,QAAA,EAAK;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzC;EAEA,oBACEZ,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,GAAI,eAAa,EAACL,SAAS,CAACU,UAAU;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC5CZ,OAAA;MAAAQ,QAAA,GAAI,gBAAc,EAACL,SAAS,CAACW,WAAW;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9CZ,OAAA;MAAAQ,QAAA,EACGN,OAAO,CAACa,GAAG,CAAC,CAACT,MAAM,EAAEU,KAAK,kBACzBhB,OAAA;QAAAQ,QAAA,GACGF,MAAM,EAAC,GAAC,eAAAN,OAAA;UAAQiB,OAAO,EAAEA,CAAA,KAAMZ,YAAY,CAACC,MAAM,CAAE;UAAAE,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GADnEI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLZ,OAAA;MAAAQ,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBZ,OAAA;MAAAQ,QAAA,EACGL,SAAS,CAACe,OAAO,CAACH,GAAG,CAAC,CAACR,MAAM,EAAES,KAAK,kBACnChB,OAAA;QAAAQ,QAAA,EAAiBD;MAAM,GAAdS,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACO,EAAA,GA9BQlB,UAAU;AAgCnB,eAAeA,UAAU;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}