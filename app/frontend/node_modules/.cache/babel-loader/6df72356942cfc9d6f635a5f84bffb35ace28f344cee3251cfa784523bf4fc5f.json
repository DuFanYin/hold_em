{"ast":null,"code":"var _jsxFileName = \"/Users/hang/Everything/computing/hold_em/app/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\n// src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport WelcomePage from './components/WelcomePage';\nimport PlayerList from './components/PlayerList';\nimport socket from './utilities/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [gameState, setGameState] = useState(null);\n  const [page, setPage] = useState('welcome'); // 'welcome' or 'game'\n\n  useEffect(() => {\n    // Listen for game state updates from the backend\n    socket.on('gameStateUpdate', newGameState => {\n      setGameState(newGameState);\n    });\n    return () => {\n      socket.off('gameStateUpdate'); // Cleanup listener on unmount\n    };\n  }, []);\n  const handlePlayerAction = action => {\n    socket.emit('playerAction', action); // Send action to backend\n  };\n\n  // This will handle when the game starts, initializing players and game state\n  const startGame = numPlayers => {\n    // Create dummy player data for the demo (You'd get this from the backend)\n    const dummyPlayers = Array.from({\n      length: numPlayers\n    }, (_, index) => ({\n      name: `Player ${index + 1}`,\n      cards: [{\n        rank: '10',\n        suit: 'Hearts'\n      }, {\n        rank: 'J',\n        suit: 'Clubs'\n      }]\n    }));\n\n    // Set dummy community cards (This would come from the backend too)\n    const communityCards = [{\n      rank: 'A',\n      suit: 'Hearts'\n    }, {\n      rank: 'Q',\n      suit: 'Spades'\n    }, {\n      rank: '7',\n      suit: 'Diamonds'\n    }, {\n      rank: '3',\n      suit: 'Clubs'\n    }, {\n      rank: '9',\n      suit: 'Hearts'\n    }];\n    setPlayers(dummyPlayers);\n    setGameState({\n      gameStatus: 'waiting',\n      currentTurn: 'Player 1',\n      actions: [],\n      communityCards: communityCards\n    });\n    setPage('game');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: page === 'welcome' ? /*#__PURE__*/_jsxDEV(WelcomePage, {\n      onStartGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PlayerList, {\n      players: players,\n      gameState: gameState,\n      onPlayerAction: handlePlayerAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lXUypVq15xKuGM6q7pGyaf5VJ94=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WelcomePage","PlayerList","socket","jsxDEV","_jsxDEV","App","_s","players","setPlayers","gameState","setGameState","page","setPage","on","newGameState","off","handlePlayerAction","action","emit","startGame","numPlayers","dummyPlayers","Array","from","length","_","index","name","cards","rank","suit","communityCards","gameStatus","currentTurn","actions","className","children","onStartGame","fileName","_jsxFileName","lineNumber","columnNumber","onPlayerAction","_c","$RefreshReg$"],"sources":["/Users/hang/Everything/computing/hold_em/app/frontend/src/App.jsx"],"sourcesContent":["// src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport WelcomePage from './components/WelcomePage';\nimport PlayerList from './components/PlayerList';\nimport socket from './utilities/socket';\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n  const [gameState, setGameState] = useState(null);\n  const [page, setPage] = useState('welcome'); // 'welcome' or 'game'\n\n  useEffect(() => {\n    // Listen for game state updates from the backend\n    socket.on('gameStateUpdate', (newGameState) => {\n      setGameState(newGameState);\n    });\n\n    return () => {\n      socket.off('gameStateUpdate'); // Cleanup listener on unmount\n    };\n  }, []);\n\n  const handlePlayerAction = (action) => {\n    socket.emit('playerAction', action);  // Send action to backend\n  };\n\n  // This will handle when the game starts, initializing players and game state\n  const startGame = (numPlayers) => {\n    // Create dummy player data for the demo (You'd get this from the backend)\n    const dummyPlayers = Array.from({ length: numPlayers }, (_, index) => ({\n      name: `Player ${index + 1}`,\n      cards: [\n        { rank: '10', suit: 'Hearts' }, \n        { rank: 'J', suit: 'Clubs' }\n      ]\n    }));\n\n    // Set dummy community cards (This would come from the backend too)\n    const communityCards = [\n      { rank: 'A', suit: 'Hearts' },\n      { rank: 'Q', suit: 'Spades' },\n      { rank: '7', suit: 'Diamonds' },\n      { rank: '3', suit: 'Clubs' },\n      { rank: '9', suit: 'Hearts' }\n    ];\n\n    setPlayers(dummyPlayers);\n    setGameState({\n      gameStatus: 'waiting',\n      currentTurn: 'Player 1',\n      actions: [],\n      communityCards: communityCards\n    });\n\n    setPage('game');\n  };\n\n  return (\n    <div className=\"App\">\n      {page === 'welcome' ? (\n        <WelcomePage onStartGame={startGame} />\n      ) : (\n        <PlayerList\n          players={players}\n          gameState={gameState}\n          onPlayerAction={handlePlayerAction}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}