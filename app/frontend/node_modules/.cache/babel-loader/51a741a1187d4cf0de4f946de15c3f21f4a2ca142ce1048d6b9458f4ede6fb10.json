{"ast":null,"code":"var _jsxFileName = \"/Users/hang/Everything/computing/hold_em/app/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Player from \"./src/components/Player\"; // Import the Player component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3000\");\nfunction PokerGame() {\n  _s();\n  const [gameState, setGameState] = useState({});\n  const [playerName, setPlayerName] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n  const [validMoves, setValidMoves] = useState([]);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [players, setPlayers] = useState([]);\n  useEffect(() => {\n    // Listen for game state updates\n    socket.on(\"updateGameState\", state => {\n      setGameState(state);\n      setPlayers(state.players); // Update players\n      setIsMyTurn(false);\n      setValidMoves([]);\n    });\n\n    // Listen for turn signal\n    socket.on(\"yourTurn\", ({\n      validMoves\n    }) => {\n      setIsMyTurn(true);\n      setValidMoves(validMoves);\n    });\n    return () => {\n      socket.off(\"updateGameState\");\n      socket.off(\"yourTurn\");\n    };\n  }, []);\n  const joinGame = () => {\n    if (playerName && roomId) {\n      socket.emit(\"joinGame\", {\n        roomId,\n        playerName\n      });\n    }\n  };\n  const sendAction = action => {\n    if (isMyTurn) {\n      socket.emit(\"playerAction\", {\n        roomId,\n        action\n      });\n      setIsMyTurn(false);\n    }\n  };\n  const handleAction = player => {\n    // Handle action based on the player\n    console.log(`${player.name} is taking an action.`);\n    // Implement the logic for player actions (e.g., betting, folding, etc.)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Poker Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Name\",\n      onChange: e => setPlayerName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Room ID\",\n      onChange: e => setRoomId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinGame,\n      children: \"Join Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game State:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(gameState, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-list\",\n      children: players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n        player: player,\n        handleAction: handleAction\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), validMoves.map(move => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendAction(move),\n        children: move\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(PokerGame, \"h0cZtYmFAk74cTXEW2WwhNfsVDM=\");\n_c = PokerGame;\nexport default PokerGame;\nvar _c;\n$RefreshReg$(_c, \"PokerGame\");","map":{"version":3,"names":["React","useState","useEffect","io","Player","jsxDEV","_jsxDEV","socket","PokerGame","_s","gameState","setGameState","playerName","setPlayerName","roomId","setRoomId","validMoves","setValidMoves","isMyTurn","setIsMyTurn","players","setPlayers","on","state","off","joinGame","emit","sendAction","action","handleAction","player","console","log","name","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","JSON","stringify","className","map","index","move","_c","$RefreshReg$"],"sources":["/Users/hang/Everything/computing/hold_em/app/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Player from \"./src/components/Player\"; // Import the Player component\n\nconst socket = io(\"http://localhost:3000\");\n\nfunction PokerGame() {\n    const [gameState, setGameState] = useState({});\n    const [playerName, setPlayerName] = useState(\"\");\n    const [roomId, setRoomId] = useState(\"\");\n    const [validMoves, setValidMoves] = useState([]);\n    const [isMyTurn, setIsMyTurn] = useState(false);\n    const [players, setPlayers] = useState([]);\n\n    useEffect(() => {\n        // Listen for game state updates\n        socket.on(\"updateGameState\", (state) => {\n            setGameState(state);\n            setPlayers(state.players); // Update players\n            setIsMyTurn(false);\n            setValidMoves([]);\n        });\n\n        // Listen for turn signal\n        socket.on(\"yourTurn\", ({ validMoves }) => {\n            setIsMyTurn(true);\n            setValidMoves(validMoves);\n        });\n\n        return () => {\n            socket.off(\"updateGameState\");\n            socket.off(\"yourTurn\");\n        };\n    }, []);\n\n    const joinGame = () => {\n        if (playerName && roomId) {\n            socket.emit(\"joinGame\", { roomId, playerName });\n        }\n    };\n\n    const sendAction = (action) => {\n        if (isMyTurn) {\n            socket.emit(\"playerAction\", { roomId, action });\n            setIsMyTurn(false);\n        }\n    };\n\n    const handleAction = (player) => {\n        // Handle action based on the player\n        console.log(`${player.name} is taking an action.`);\n        // Implement the logic for player actions (e.g., betting, folding, etc.)\n    };\n\n    return (\n        <div>\n            <h1>Poker Game</h1>\n            <input\n                type=\"text\"\n                placeholder=\"Enter Name\"\n                onChange={(e) => setPlayerName(e.target.value)}\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Enter Room ID\"\n                onChange={(e) => setRoomId(e.target.value)}\n            />\n            <button onClick={joinGame}>Join Game</button>\n\n            <h2>Game State:</h2>\n            <pre>{JSON.stringify(gameState, null, 2)}</pre>\n\n            {/* Player List Section */}\n            <div className=\"player-list\">\n                {players.map((player, index) => (\n                    <Player key={index} player={player} handleAction={handleAction} />\n                ))}\n            </div>\n\n            {/* Player Actions */}\n            {isMyTurn && (\n                <div>\n                    <h2>Your Turn</h2>\n                    {validMoves.map((move) => (\n                        <button key={move} onClick={() => sendAction(move)}>\n                            {move}\n                        </button>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default PokerGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}